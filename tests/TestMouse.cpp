#include <iostream>
#include <string>
#include <vector>
#include "SDL4Cpp.h"

int main(int argv, char *args[])
{
	SDL::Event event;

	// Stolen from the mailing list.
	// Then stolen from SDL's documentation.
	// Creates a new mouse cursor from an XPM
	// XPM
	static const char *arrow[] =
	{
		// width height num_colors chars_per_pixel
		"    32    32        3            1",
		// colors
		"X c #000000",
		". c #ffffff",
		"  c None",
		// pixels
		"X                               ",
		"XX                              ",
		"X.X                             ",
		"X..X                            ",
		"X...X                           ",
		"X....X                          ",
		"X.....X                         ",
		"X......X                        ",
		"X.......X                       ",
		"X........X                      ",
		"X.....XXXXX                     ",
		"X..X..X                         ",
		"X.X X..X                        ",
		"XX  X..X                        ",
		"X    X..X                       ",
		"     X..X                       ",
		"      X..X                      ",
		"      X..X                      ",
		"       XX                       ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"0,0"
	};

	// XPM
	// Generated by GIMP
	static const char *hello[] =
	{
		"    32    32        2            1",
		"  c None",
		". c #FFFFFF",
		"  c None",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"    .  . ... .   .    ...       ",
		"    .  . .   .   .   .   .      ",
		"    .  . .   .   .   .   .      ",
		"    .... ... .   .   .   .      ",
		"    .  . .   .   .   .   .      ",
		"    .  . .   .   .   .   .      ",
		"    .  . ... ... ...  ...       ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"  .     .  ...  ....  .   ....  ",
		"  .     . .   . .   . .   .   . ",
		"  .  .  . .   . .   . .   .   . ",
		"  .  .  . .   . ..... .   .   . ",
		"  .  .  . .   . .  .  .   .   . ",
		"  .  .  . .   . .   . .   .   . ",
		"   .. ..   ...  .   . ... ....  ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"                                ",
		"0,0"
	};


	class handler : public SDL::Handle
	{
		public:
			handler() : quit(false), isarrow(false), cursor()
			{
			}

			~handler()
			{
			}

			bool KeyPressed (SDL::KeySym &keysym)
			{
				if(keysym.sym == SDLK_SPACE)
				{
					if(isarrow)
					{
						cursor.Set(hello);
						isarrow = false;
					}
					else
					{
						cursor.Set(arrow);
						isarrow = true;
					}
				}

				if(keysym.sym == SDLK_ESCAPE)
					quit = true;

				return true;
			}

			operator bool()
			{
				return quit;
			}

		private:
			bool quit;
			bool isarrow;
			SDL::Cursor cursor;
	} handler;

	SDL::Init(SDL_INIT_VIDEO);
	atexit(SDL::Quit);

	SDL::Screen screen(640, 480, 32, SDL_HWSURFACE|SDL_DOUBLEBUF);

	// Set the initial cursor
	SDL::Cursor cursor;

	try {
		cursor.Set(NULL);
	}
	catch(SDL::LogicError e) {
		std::cout << "Caught logic error when passing NULL to cursor.Set" << std::endl;
	}
	cursor.Set(hello);

	std::cout << "Press Space to switch cursors" << std::endl
		<< "Press Esc to quit" << std::endl;

	while(handler == false)
	{
		event.Poll(handler);
	}

	return 0;
}

